// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/version.proto

package version

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VersionService_Apply_FullMethodName           = "/version.VersionService/Apply"
	VersionService_Operator_FullMethodName        = "/version.VersionService/Operator"
	VersionService_Product_FullMethodName         = "/version.VersionService/Product"
	VersionService_Metadata_FullMethodName        = "/version.VersionService/Metadata"
	VersionService_MetadataV2_FullMethodName      = "/version.VersionService/MetadataV2"
	VersionService_GetReleaseNotes_FullMethodName = "/version.VersionService/GetReleaseNotes"
)

// VersionServiceClient is the client API for VersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VersionService provides public API methods for version service usage.
type VersionServiceClient interface {
	// Apply provides information about specific product version and its dependencies.
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Operator provides information about product versions and its dependencies for operator.
	Operator(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorResponse, error)
	// Product provides information about product versions among all operator versions.
	Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// Metadata provides metadata information about products.
	Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	// Metadata v2 provides metadata information about products. It is an extension of Metadata with new fields.
	MetadataV2(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataV2Response, error)
	GetReleaseNotes(ctx context.Context, in *GetReleaseNotesRequest, opts ...grpc.CallOption) (*GetReleaseNotesResponse, error)
}

type versionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionServiceClient(cc grpc.ClientConnInterface) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, VersionService_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) Operator(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperatorResponse)
	err := c.cc.Invoke(ctx, VersionService_Operator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, VersionService_Product_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, VersionService_Metadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) MetadataV2(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataV2Response)
	err := c.cc.Invoke(ctx, VersionService_MetadataV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) GetReleaseNotes(ctx context.Context, in *GetReleaseNotesRequest, opts ...grpc.CallOption) (*GetReleaseNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReleaseNotesResponse)
	err := c.cc.Invoke(ctx, VersionService_GetReleaseNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionServiceServer is the server API for VersionService service.
// All implementations must embed UnimplementedVersionServiceServer
// for forward compatibility
//
// VersionService provides public API methods for version service usage.
type VersionServiceServer interface {
	// Apply provides information about specific product version and its dependencies.
	Apply(context.Context, *ApplyRequest) (*VersionResponse, error)
	// Operator provides information about product versions and its dependencies for operator.
	Operator(context.Context, *OperatorRequest) (*OperatorResponse, error)
	// Product provides information about product versions among all operator versions.
	Product(context.Context, *ProductRequest) (*ProductResponse, error)
	// Metadata provides metadata information about products.
	Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	// Metadata v2 provides metadata information about products. It is an extension of Metadata with new fields.
	MetadataV2(context.Context, *MetadataRequest) (*MetadataV2Response, error)
	GetReleaseNotes(context.Context, *GetReleaseNotesRequest) (*GetReleaseNotesResponse, error)
	mustEmbedUnimplementedVersionServiceServer()
}

// UnimplementedVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVersionServiceServer struct {
}

func (UnimplementedVersionServiceServer) Apply(context.Context, *ApplyRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedVersionServiceServer) Operator(context.Context, *OperatorRequest) (*OperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operator not implemented")
}
func (UnimplementedVersionServiceServer) Product(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Product not implemented")
}
func (UnimplementedVersionServiceServer) Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedVersionServiceServer) MetadataV2(context.Context, *MetadataRequest) (*MetadataV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataV2 not implemented")
}
func (UnimplementedVersionServiceServer) GetReleaseNotes(context.Context, *GetReleaseNotesRequest) (*GetReleaseNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseNotes not implemented")
}
func (UnimplementedVersionServiceServer) mustEmbedUnimplementedVersionServiceServer() {}

// UnsafeVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionServiceServer will
// result in compilation errors.
type UnsafeVersionServiceServer interface {
	mustEmbedUnimplementedVersionServiceServer()
}

func RegisterVersionServiceServer(s grpc.ServiceRegistrar, srv VersionServiceServer) {
	s.RegisterService(&VersionService_ServiceDesc, srv)
}

func _VersionService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionService_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_Operator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Operator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionService_Operator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Operator(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_Product_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Product(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionService_Product_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Product(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionService_Metadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Metadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_MetadataV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).MetadataV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionService_MetadataV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).MetadataV2(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_GetReleaseNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).GetReleaseNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionService_GetReleaseNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).GetReleaseNotes(ctx, req.(*GetReleaseNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VersionService_ServiceDesc is the grpc.ServiceDesc for VersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "version.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _VersionService_Apply_Handler,
		},
		{
			MethodName: "Operator",
			Handler:    _VersionService_Operator_Handler,
		},
		{
			MethodName: "Product",
			Handler:    _VersionService_Product_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _VersionService_Metadata_Handler,
		},
		{
			MethodName: "MetadataV2",
			Handler:    _VersionService_MetadataV2_Handler,
		},
		{
			MethodName: "GetReleaseNotes",
			Handler:    _VersionService_GetReleaseNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/version.proto",
}
