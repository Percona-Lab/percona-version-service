// Code generated by go-swagger; DO NOT EDIT.

package version_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewVersionServiceApplyParams creates a new VersionServiceApplyParams object
// with the default values initialized.
func NewVersionServiceApplyParams() *VersionServiceApplyParams {
	var ()
	return &VersionServiceApplyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewVersionServiceApplyParamsWithTimeout creates a new VersionServiceApplyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewVersionServiceApplyParamsWithTimeout(timeout time.Duration) *VersionServiceApplyParams {
	var ()
	return &VersionServiceApplyParams{

		timeout: timeout,
	}
}

// NewVersionServiceApplyParamsWithContext creates a new VersionServiceApplyParams object
// with the default values initialized, and the ability to set a context for a request
func NewVersionServiceApplyParamsWithContext(ctx context.Context) *VersionServiceApplyParams {
	var ()
	return &VersionServiceApplyParams{

		Context: ctx,
	}
}

// NewVersionServiceApplyParamsWithHTTPClient creates a new VersionServiceApplyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewVersionServiceApplyParamsWithHTTPClient(client *http.Client) *VersionServiceApplyParams {
	var ()
	return &VersionServiceApplyParams{
		HTTPClient: client,
	}
}

/*VersionServiceApplyParams contains all the parameters to send to the API endpoint
for the version service apply operation typically these are written to a http.Request
*/
type VersionServiceApplyParams struct {

	/*Apply*/
	Apply string
	/*BackupVersion*/
	BackupVersion *string
	/*CustomResourceOID*/
	CustomResourceOID *string
	/*DatabaseVersion*/
	DatabaseVersion *string
	/*KubeVersion*/
	KubeVersion *string
	/*NamespaceOID*/
	NamespaceOID *string
	/*OperatorVersion*/
	OperatorVersion string
	/*Platform*/
	Platform *string
	/*PmmVersion*/
	PmmVersion *string
	/*Product*/
	Product string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the version service apply params
func (o *VersionServiceApplyParams) WithTimeout(timeout time.Duration) *VersionServiceApplyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the version service apply params
func (o *VersionServiceApplyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the version service apply params
func (o *VersionServiceApplyParams) WithContext(ctx context.Context) *VersionServiceApplyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the version service apply params
func (o *VersionServiceApplyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the version service apply params
func (o *VersionServiceApplyParams) WithHTTPClient(client *http.Client) *VersionServiceApplyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the version service apply params
func (o *VersionServiceApplyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApply adds the apply to the version service apply params
func (o *VersionServiceApplyParams) WithApply(apply string) *VersionServiceApplyParams {
	o.SetApply(apply)
	return o
}

// SetApply adds the apply to the version service apply params
func (o *VersionServiceApplyParams) SetApply(apply string) {
	o.Apply = apply
}

// WithBackupVersion adds the backupVersion to the version service apply params
func (o *VersionServiceApplyParams) WithBackupVersion(backupVersion *string) *VersionServiceApplyParams {
	o.SetBackupVersion(backupVersion)
	return o
}

// SetBackupVersion adds the backupVersion to the version service apply params
func (o *VersionServiceApplyParams) SetBackupVersion(backupVersion *string) {
	o.BackupVersion = backupVersion
}

// WithCustomResourceOID adds the customResourceOID to the version service apply params
func (o *VersionServiceApplyParams) WithCustomResourceOID(customResourceOID *string) *VersionServiceApplyParams {
	o.SetCustomResourceOID(customResourceOID)
	return o
}

// SetCustomResourceOID adds the customResourceOId to the version service apply params
func (o *VersionServiceApplyParams) SetCustomResourceOID(customResourceOID *string) {
	o.CustomResourceOID = customResourceOID
}

// WithDatabaseVersion adds the databaseVersion to the version service apply params
func (o *VersionServiceApplyParams) WithDatabaseVersion(databaseVersion *string) *VersionServiceApplyParams {
	o.SetDatabaseVersion(databaseVersion)
	return o
}

// SetDatabaseVersion adds the databaseVersion to the version service apply params
func (o *VersionServiceApplyParams) SetDatabaseVersion(databaseVersion *string) {
	o.DatabaseVersion = databaseVersion
}

// WithKubeVersion adds the kubeVersion to the version service apply params
func (o *VersionServiceApplyParams) WithKubeVersion(kubeVersion *string) *VersionServiceApplyParams {
	o.SetKubeVersion(kubeVersion)
	return o
}

// SetKubeVersion adds the kubeVersion to the version service apply params
func (o *VersionServiceApplyParams) SetKubeVersion(kubeVersion *string) {
	o.KubeVersion = kubeVersion
}

// WithNamespaceOID adds the namespaceOID to the version service apply params
func (o *VersionServiceApplyParams) WithNamespaceOID(namespaceOID *string) *VersionServiceApplyParams {
	o.SetNamespaceOID(namespaceOID)
	return o
}

// SetNamespaceOID adds the namespaceOId to the version service apply params
func (o *VersionServiceApplyParams) SetNamespaceOID(namespaceOID *string) {
	o.NamespaceOID = namespaceOID
}

// WithOperatorVersion adds the operatorVersion to the version service apply params
func (o *VersionServiceApplyParams) WithOperatorVersion(operatorVersion string) *VersionServiceApplyParams {
	o.SetOperatorVersion(operatorVersion)
	return o
}

// SetOperatorVersion adds the operatorVersion to the version service apply params
func (o *VersionServiceApplyParams) SetOperatorVersion(operatorVersion string) {
	o.OperatorVersion = operatorVersion
}

// WithPlatform adds the platform to the version service apply params
func (o *VersionServiceApplyParams) WithPlatform(platform *string) *VersionServiceApplyParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the version service apply params
func (o *VersionServiceApplyParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithPmmVersion adds the pmmVersion to the version service apply params
func (o *VersionServiceApplyParams) WithPmmVersion(pmmVersion *string) *VersionServiceApplyParams {
	o.SetPmmVersion(pmmVersion)
	return o
}

// SetPmmVersion adds the pmmVersion to the version service apply params
func (o *VersionServiceApplyParams) SetPmmVersion(pmmVersion *string) {
	o.PmmVersion = pmmVersion
}

// WithProduct adds the product to the version service apply params
func (o *VersionServiceApplyParams) WithProduct(product string) *VersionServiceApplyParams {
	o.SetProduct(product)
	return o
}

// SetProduct adds the product to the version service apply params
func (o *VersionServiceApplyParams) SetProduct(product string) {
	o.Product = product
}

// WriteToRequest writes these params to a swagger request
func (o *VersionServiceApplyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param apply
	if err := r.SetPathParam("apply", o.Apply); err != nil {
		return err
	}

	if o.BackupVersion != nil {

		// query param backupVersion
		var qrBackupVersion string
		if o.BackupVersion != nil {
			qrBackupVersion = *o.BackupVersion
		}
		qBackupVersion := qrBackupVersion
		if qBackupVersion != "" {
			if err := r.SetQueryParam("backupVersion", qBackupVersion); err != nil {
				return err
			}
		}

	}

	if o.CustomResourceOID != nil {

		// query param customResourceOID
		var qrCustomResourceOID string
		if o.CustomResourceOID != nil {
			qrCustomResourceOID = *o.CustomResourceOID
		}
		qCustomResourceOID := qrCustomResourceOID
		if qCustomResourceOID != "" {
			if err := r.SetQueryParam("customResourceOID", qCustomResourceOID); err != nil {
				return err
			}
		}

	}

	if o.DatabaseVersion != nil {

		// query param databaseVersion
		var qrDatabaseVersion string
		if o.DatabaseVersion != nil {
			qrDatabaseVersion = *o.DatabaseVersion
		}
		qDatabaseVersion := qrDatabaseVersion
		if qDatabaseVersion != "" {
			if err := r.SetQueryParam("databaseVersion", qDatabaseVersion); err != nil {
				return err
			}
		}

	}

	if o.KubeVersion != nil {

		// query param kubeVersion
		var qrKubeVersion string
		if o.KubeVersion != nil {
			qrKubeVersion = *o.KubeVersion
		}
		qKubeVersion := qrKubeVersion
		if qKubeVersion != "" {
			if err := r.SetQueryParam("kubeVersion", qKubeVersion); err != nil {
				return err
			}
		}

	}

	if o.NamespaceOID != nil {

		// query param namespaceOID
		var qrNamespaceOID string
		if o.NamespaceOID != nil {
			qrNamespaceOID = *o.NamespaceOID
		}
		qNamespaceOID := qrNamespaceOID
		if qNamespaceOID != "" {
			if err := r.SetQueryParam("namespaceOID", qNamespaceOID); err != nil {
				return err
			}
		}

	}

	// path param operatorVersion
	if err := r.SetPathParam("operatorVersion", o.OperatorVersion); err != nil {
		return err
	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string
		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {
			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}

	}

	if o.PmmVersion != nil {

		// query param pmmVersion
		var qrPmmVersion string
		if o.PmmVersion != nil {
			qrPmmVersion = *o.PmmVersion
		}
		qPmmVersion := qrPmmVersion
		if qPmmVersion != "" {
			if err := r.SetQueryParam("pmmVersion", qPmmVersion); err != nil {
				return err
			}
		}

	}

	// path param product
	if err := r.SetPathParam("product", o.Product); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
